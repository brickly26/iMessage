datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin"]
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  conversations ConversationParticipant[]
  messages      Message[]
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id                String                      @id @default(auto()) @map("_id") @db.ObjectId
  participants      ConversationParticipant[]
  messages          Message[]
  latestMessageId   String?                     @db.ObjectId @unique
  latestMessage     Message?                    @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)   
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
}

model ConversationParticipant {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String         @db.ObjectId
  user                    User           @relation(fields: [userId], references: [id])
  conversationId          String         @db.ObjectId
  Conversation            Conversation   @relation(fields: [conversationId], references: [id])
  hasSeenLatestMessage    Boolean
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model Message {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  senderId          String         @db.ObjectId
  sender            User           @relation(fields: [senderId], references: [id])
  body              String
  conversationId    String         @db.ObjectId
  Conversation      Conversation   @relation(fields: [conversationId], references: [id])
  isLatestIn        Conversation?  @relation(name: "latestConversationMessage")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}
