datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String                    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?                   @unique
  username         String?                   @unique
  emailVerified    DateTime?
  conversations    ConversationParticipant[]
  messages         Message[]
  image            String?
  accounts         Account[]
  sessions         Session[]
  sentRequests     FriendRequest[]           @relation(name: "sentRequests")
  recievedRequests FriendRequest[]           @relation(name: "receivedRequests")
  friends          User[]                    @relation("Friends", fields: [friendIds], references: [id])
  friendIds        String[]                  @db.ObjectId
  friendsWith      User[]                    @relation("Friends", fields: [friendsWithIds], references: [id])
  friendsWithIds   String[]                  @db.ObjectId
}

model FriendRequest {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  status     RequestStatus
  sender     User          @relation(name: "sentRequests", fields: [senderId], references: [id])
  senderId   String        @db.ObjectId
  reciever   User          @relation(name: "receivedRequests", fields: [recieverId], references: [id])
  recieverId String        @db.ObjectId
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Conversation {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  participants    ConversationParticipant[]
  messages        Message[]
  latestMessageId String?                   @unique @db.ObjectId
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  userId               String       @db.ObjectId
  user                 User         @relation(fields: [userId], references: [id])
  conversationId       String       @db.ObjectId
  Conversation         Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  hasSeenLatestMessage Boolean
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String        @db.ObjectId
  sender         User          @relation(fields: [senderId], references: [id])
  body           String
  conversationId String        @db.ObjectId
  Conversation   Conversation  @relation(fields: [conversationId], references: [id])
  isLatestIn     Conversation? @relation(name: "latestConversationMessage")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
